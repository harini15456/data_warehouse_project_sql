
--EDA STEP1
--Explore all the objects in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES;
--Use DataWareHouse db

--Explore all columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='dim_customers';


--EDA STEP 2
SELECT DISTINCT country from gold.dim_customers;
SELECT DISTINCT category,subcategory,product_name from gold.dim_products ORDER BY 1,2,3;

--EDA STEP 3
SELECT MIN(order_date),MAX(order_date),DATEDIFF(year,MIN(order_date),MAX(order_date)) AS order_range_years 
FROM gold.fact_sales; --First Order Date and last
SELECT MIN(order_date),MAX(order_date),DATEDIFF(month,MIN(order_date),MAX(order_date)) AS order_range_months 
FROM gold.fact_sales; --First Order Date and last

SELECT 
MIN(birthdate) AS oldest_birthdate,
DATEDIFF(year,MIN(birthdate),GETDATE()) AS oldest_age,
MAX(birthdate) AS youngest_birthdate,
DATEDIFF(year,MAX(birthdate),GETDATE()) AS youngest_age
FROM gold.dim_customers

--EDA STEP 4
--Find total Sales
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales;
--Find how many items are sold
SELECT SUM(quantity) AS total_quantity FROM gold.fact_sales;
--Find avg selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales;
--Find total num of orders
SELECT COUNT(order_number) AS total_orders FROM gold.fact_sales;
SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold.fact_sales;
--Find total number of products
SELECT COUNT(product_key) AS total_products FROM gold.dim_products;
SELECT COUNT(DISTINCT product_key) AS total_products FROM gold.dim_products;
--Find total num of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers;
--Find total num of customers that has placed an order
SELECT COUNT(DISTINCT customer_key) AS total_customers FROM gold.fact_sales;


--Generate a report that shows all key metrics of the business

SELECT 'Total Sales' as measure_name,SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity',SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price',AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Orders',COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Products',COUNT(product_name) FROM gold.dim_products
UNION ALL
SELECT 'Total Nr. Customers',COUNT(customer_key) FROM gold.dim_customers;

--EDA STEP 5
--Find total cust by countries
SELECT 
country,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC

--Find total cust by gender
SELECT 
gender,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC

--Find total products by category
SELECT 
category,
COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC

--What is the avg costs in each category
SELECT 
category,
AVG(cost) AS avg_costs
FROM gold.dim_products
GROUP BY category
ORDER BY avg_costs DESC

--What is the total revenue generated for each category
SELECT 
p.category,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key=f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC

--Find total revenue generated by each customer
SELECT 
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key=f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC

--What is the distribution of sold items across countries
SELECT 
c.country,
SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key=f.customer_key
GROUP BY 
c.country
ORDER BY total_sold_items DESC


--EDA STEP 6
--Which 5 prods generated the highest revneue
SELECT TOP 5
p.product_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key=f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

--Using window func
SELECT * FROM(
	SELECT 
	p.product_name,
	SUM(f.sales_amount) AS total_revenue,
	ROW_NUMBER() OVER(ORDER BY SUM(f.sales_amount) DESC) AS rank_products
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key=f.product_key
	GROUP BY p.product_name)t
WHERE rank_products<=5;

--Which are 5 worst-performing prods in terms of sales
SELECT TOP 5
p.product_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key=f.product_key
GROUP BY p.product_name
ORDER BY total_revenue 

--Find the top 10 customers who have generated the highest revenue and 3 customers with the fewest orders placed

--TOP 10
SELECT TOP 10
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key=f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC

--Least 3
SELECT TOP 3
c.customer_key,
c.first_name,
c.last_name,
COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key=f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_orders 
